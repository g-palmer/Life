// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.CellView = (function(_super) {
    __extends(CellView, _super);

    function CellView() {
      _ref = CellView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CellView.prototype.tagName = 'td';

    CellView.prototype.initialize = function() {
      var _this = this;

      this.r = 255;
      this.g = Math.floor(255 / this.model.get('n') * (this.model.get('y') + 1));
      this.b = Math.floor(255 / this.model.get('n') * (this.model.get('x') + 1));
      return this.model.on('change:alive', function() {
        if (_this.model.get('alive')) {
          return _this.$el.css({
            'background-color': 'rgb(' + _this.r + ', ' + _this.g + ', ' + _this.b + ')'
          });
        } else {
          return _this.$el.css({
            'background-color': 'black'
          });
        }
      });
    };

    CellView.prototype.events = {
      'mouseenter': function() {
        if (window.buttonState) {
          return this.model.set('alive', !this.model.get('alive'));
        }
      },
      'mousedown': function() {
        return this.model.set('alive', !this.model.get('alive'));
      }
    };

    return CellView;

  })(Backbone.View);

}).call(this);

/*
//@ sourceMappingURL=cellView.map
*/
